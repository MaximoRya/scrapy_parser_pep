number,name,status
160,PEP 160 – Python 1.6 Release Schedule,
201,PEP 201 – Lockstep Iteration,
200,PEP 200 – Python 2.0 Release Schedule,
1,PEP 1 – PEP Purpose and Guidelines,
206,PEP 206 – Python Advanced Library,
204,PEP 204 – Range Literals,
202,PEP 202 – List Comprehensions,
207,PEP 207 – Rich Comparisons,
205,PEP 205 – Weak References,
203,PEP 203 – Augmented Assignments,
208,PEP 208 – Reworking the Coercion Model,
103,PEP 103 – Collecting information about git,
102,PEP 102 – Doing Python Micro Releases,
42,PEP 42 – Feature Requests,
101,PEP 101 – Doing Python Releases 101,
100,PEP 100 – Python Unicode Integration,
8104,PEP 8104 – 2023 Term Steering Council election,
8103,PEP 8103 – 2022 Term Steering Council election,
8102,PEP 8102 – 2021 Term Steering Council election,
8100,PEP 8100 – January 2019 Steering Council election,
8101,PEP 8101 – 2020 Term Steering Council election,
8010,PEP 8010 – The Technical Leader Governance Model,
8015,PEP 8015 – Organization of the Python community,
8016,PEP 8016 – The Steering Council Model,
8014,PEP 8014 – The Commons Governance Model,
8011,PEP 8011 – Python Governance Model Lead by Trio of Pythonistas,
8013,PEP 8013 – The External Council Governance Model,
8012,PEP 8012 – The Community Governance Model,
8002,PEP 8002 – Open Source Governance Survey,
8001,PEP 8001 – Python Governance Voting Process,
3333,PEP 3333 – Python Web Server Gateway Interface v1.0.1,
8000,PEP 8000 – Python Language Governance Proposal Overview,
3156,PEP 3156 – Asynchronous IO Support Rebooted: the “asyncio” Module,
3155,PEP 3155 – Qualified name for classes and functions,
3153,PEP 3153 – Asynchronous IO support,
3154,PEP 3154 – Pickle protocol version 4,
3152,PEP 3152 – Cofunctions,
3148,PEP 3148 – futures - execute computations asynchronously,
3146,PEP 3146 – Merging Unladen Swallow into CPython,
3150,PEP 3150 – Statement local namespaces (aka “given” clause),
3151,PEP 3151 – Reworking the OS and IO exception hierarchy,
3145,PEP 3145 – Asynchronous I/O For subprocess.Popen,
3147,PEP 3147 – PYC Repository Directories,
3149,PEP 3149 – ABI version tagged .so files,
3144,PEP 3144 – IP Address Manipulation Library for the Python Standard Library,
3142,PEP 3142 – Add a “while” clause to generator expressions,
3143,PEP 3143 – Standard daemon process library,
3141,PEP 3141 – A Type Hierarchy for Numbers,
3140,"PEP 3140 – str(container) should call str(item), not repr(item)",
3139,PEP 3139 – Cleaning out sys and the “interpreter” module,
3135,PEP 3135 – New Super,
3136,PEP 3136 – Labeled break and continue,
3138,PEP 3138 – String representation in Python 3000,
3137,PEP 3137 – Immutable Bytes and Mutable Buffer,
3134,PEP 3134 – Exception Chaining and Embedded Tracebacks,
3130,PEP 3130 – Access to Current Module/Class/Function,
3133,PEP 3133 – Introducing Roles,
3129,PEP 3129 – Class Decorators,
3131,PEP 3131 – Supporting Non-ASCII Identifiers,
3132,PEP 3132 – Extended Iterable Unpacking,
3127,PEP 3127 – Integer Literal Support and Syntax,
3126,PEP 3126 – Remove Implicit String Concatenation,
3125,PEP 3125 – Remove Backslash Continuation,
3128,PEP 3128 – BList: A Faster List-like Type,
3123,PEP 3123 – Making PyObject_HEAD conform to standard C,
3124,"PEP 3124 – Overloading, Generic Functions, Interfaces, and Adaptation",
3120,PEP 3120 – Using UTF-8 as the default source encoding,
3119,PEP 3119 – Introducing Abstract Base Classes,
3122,PEP 3122 – Delineation of the main module,
3121,PEP 3121 – Extension Module Initialization and Finalization,
3117,PEP 3117 – Postfix type declarations,
3118,PEP 3118 – Revising the buffer protocol,
3115,PEP 3115 – Metaclasses in Python 3000,
3116,PEP 3116 – New I/O,
3114,PEP 3114 – Renaming iterator.next() to iterator.__next__(),
3113,PEP 3113 – Removal of Tuple Parameter Unpacking,
3111,PEP 3111 – Simple input built-in in Python 3000,
3109,PEP 3109 – Raising Exceptions in Python 3000,
3112,PEP 3112 – Bytes literals in Python 3000,
3110,PEP 3110 – Catching Exceptions in Python 3000,
3108,PEP 3108 – Standard Library Reorganization,
3107,PEP 3107 – Function Annotations,
3106,"PEP 3106 – Revamping dict.keys(), .values() and .items()",
3105,PEP 3105 – Make print a function,
3104,PEP 3104 – Access to Names in Outer Scopes,
3102,PEP 3102 – Keyword-Only Arguments,
3101,PEP 3101 – Advanced String Formatting,
3099,PEP 3099 – Things that will Not Change in Python 3000,
3103,PEP 3103 – A Switch/Case Statement,
3002,PEP 3002 – Procedure for Backwards-Incompatible Changes,
3001,PEP 3001 – Procedure for reviewing and improving standard library modules,
3003,PEP 3003 – Python Language Moratorium,
3100,PEP 3100 – Miscellaneous Python 3.0 Plans,
3000,PEP 3000 – Python 3000,
801,PEP 801 – Reserved,
754,PEP 754 – IEEE 754 Floating Point Special Values,
715,PEP 715 – Disabling bdist_egg distribution uploads on PyPI,
713,PEP 713 – Callable Modules,
714,PEP 714 – Rename dist-info-metadata in the Simple API,
712,PEP 712 – Adding a “converter” parameter to dataclasses.field,
711,PEP 711 – PyBI: a standard format for distributing Python Binaries,
709,PEP 709 – Inlined comprehensions,
707,PEP 707 – A simplified signature for __exit__ and __aexit__,
708,PEP 708 – Extending the Repository API to Mitigate Dependency Confusion Attacks,
704,PEP 704 – Require virtual environments by default for package installers,
710,PEP 710 – Recording the provenance of installed packages,
705,PEP 705 – TypedMapping: Type Hints for Mappings with a Fixed Set of Keys,
706,PEP 706 – Filter for tarfile.extractall,
702,PEP 702 – Marking deprecations using the type system,
703,PEP 703 – Making the Global Interpreter Lock Optional in CPython,
699,PEP 699 – Remove private dict version field added in PEP 509,
701,PEP 701 – Syntactic formalization of f-strings,
700,PEP 700 – Additional Fields for the Simple API for Package Indexes,
698,PEP 698 – Override Decorator for Static Typing,
697,PEP 697 – Limited C API for Extending Opaque Types,
696,PEP 696 – Type defaults for TypeVarLikes,
695,PEP 695 – Type Parameter Syntax,
694,PEP 694 – Upload 2.0 API for Python Package Repositories,
693,PEP 693 – Python 3.12 Release Schedule,
690,PEP 690 – Lazy Imports,
689,PEP 689 – Unstable C API tier,
692,PEP 692 – Using TypedDict for more precise **kwargs typing,
691,PEP 691 – JSON-based Simple API for Python Package Indexes,
686,PEP 686 – Make UTF-8 mode default,
687,PEP 687 – Isolating modules in the standard library,
688,PEP 688 – Making the buffer protocol accessible in Python,
683,"PEP 683 – Immortal Objects, Using a Fixed Refcount",
685,PEP 685 – Comparison of extra names for optional distribution dependencies,
684,PEP 684 – A Per-Interpreter GIL,
681,PEP 681 – Data Class Transforms,
682,PEP 682 – Format Specifier for Signed Zero,
680,PEP 680 – tomllib: Support for Parsing TOML in the Standard Library,
679,PEP 679 – Allow parentheses in assert statements,
678,PEP 678 – Enriching Exceptions with Notes,
667,PEP 667 – Consistent views of namespaces,
670,PEP 670 – Convert macros to functions in the Python C API,
677,PEP 677 – Callable Type Syntax,
675,PEP 675 – Arbitrary Literal String Type,
673,PEP 673 – Self Type,
671,PEP 671 – Syntax for late-bound function argument defaults,
669,PEP 669 – Low Impact Monitoring for CPython,
666,PEP 666 – Reject Foolish Indentation,
664,PEP 664 – Python 3.11 Release Schedule,
665,PEP 665 – A file format to list Python dependencies for reproducibility of an application,
672,PEP 672 – Unicode-related Security Considerations for Python,
663,"PEP 663 – Standardizing Enum str(), repr(), and format() behaviors",
674,PEP 674 – Disallow using macros as l-values,
662,PEP 662 – Editable installs via virtual wheels,
661,PEP 661 – Sentinel Values,
660,PEP 660 – Editable installs for pyproject.toml based builds (wheel based),
676,PEP 676 – PEP Infrastructure Process,
659,PEP 659 – Specializing Adaptive Interpreter,
658,PEP 658 – Serve Distribution Metadata in the Simple Repository API,
656,PEP 656 – Platform Tag for Linux Distributions Using Musl,
668,PEP 668 – Marking Python base environments as “externally managed”,
657,PEP 657 – Include Fine Grained Error Locations in Tracebacks,
655,PEP 655 – Marking individual TypedDict items as required or potentially-missing,
654,PEP 654 – Exception Groups and except*,
653,PEP 653 – Precise Semantics for Pattern Matching,
652,PEP 652 – Maintaining the Stable ABI,
648,PEP 648 – Extensible customizations of the interpreter at startup,
649,PEP 649 – Deferred Evaluation Of Annotations Using Descriptors,
651,PEP 651 – Robust Stack Overflow Handling,
647,PEP 647 – User-Defined Type Guards,
641,PEP 641 – Using an underscore in the version portion of Python 3.10 compatibility tags,
643,PEP 643 – Metadata for Package Source Distributions,
644,PEP 644 – Require OpenSSL 1.1.1 or newer,
646,PEP 646 – Variadic Generics,
645,PEP 645 – Allow writing optional types as ,
640,PEP 640 – Unused variable syntax,
650,PEP 650 – Specifying Installer Requirements for Python Projects,
642,PEP 642 – Explicit Pattern Syntax for Structural Pattern Matching,
636,PEP 636 – Structural Pattern Matching: Tutorial,
637,PEP 637 – Support for indexing with keyword arguments,
633,PEP 633 – Dependency specification in pyproject.toml using an exploded TOML table,
635,PEP 635 – Structural Pattern Matching: Motivation and Rationale,
634,PEP 634 – Structural Pattern Matching: Specification,
631,PEP 631 – Dependency specification in pyproject.toml based on PEP 508,
638,PEP 638 – Syntactic Macros,
632,PEP 632 – Deprecate distutils module,
628,PEP 628 – Add ,
626,PEP 626 – Precise line numbers for debugging and other tools.,
630,PEP 630 – Isolating Extension Modules,
625,PEP 625 – Filename of a Source Distribution,
624,PEP 624 – Remove Py_UNICODE encoder APIs,
623,PEP 623 – Remove wstr from Unicode,
639,PEP 639 – Improving License Clarity with Better Package Metadata,
627,PEP 627 – Recording installed projects,
619,PEP 619 – Python 3.10 Release Schedule,
620,PEP 620 – Hide implementation details from the C API,
622,PEP 622 – Structural Pattern Matching,
621,PEP 621 – Storing project metadata in pyproject.toml,
629,PEP 629 – Versioning PyPI’s Simple API,
617,PEP 617 – New PEG parser for CPython,
616,PEP 616 – String methods to remove prefixes and suffixes,
618,PEP 618 – Add Optional Length-Checking To zip,
613,PEP 613 – Explicit Type Aliases,
614,PEP 614 – Relaxing Grammar Restrictions On Decorators,
615,PEP 615 – Support for the IANA Time Zone Database in the Standard Library,
612,PEP 612 – Parameter Specification Variables,
610,PEP 610 – Recording the Direct URL Origin of installed distributions,
608,PEP 608 – Coordinated Python release,
607,PEP 607 – Reducing CPython’s Feature Delivery Latency,
606,PEP 606 – Python Compatibility Version,
609,PEP 609 – Python Packaging Authority (PyPA) Governance,
603,PEP 603 – Adding a frozenmap type to collections,
604,PEP 604 – Allow writing union types as ,
611,PEP 611 – The one million limit,
600,PEP 600 – Future ‘manylinux’ Platform Tags for Portable Linux Built Distributions,
598,PEP 598 – Introducing incremental feature releases,
599,PEP 599 – The manylinux2014 Platform Tag,
597,PEP 597 – Add optional EncodingWarning,
595,PEP 595 – Improving bugs.python.org,
605,PEP 605 – A rolling feature release stream for CPython,
593,PEP 593 – Flexible function and variable annotations,
602,PEP 602 – Annual Release Cycle for Python,
596,PEP 596 – Python 3.9 Release Schedule,
601,PEP 601 – Forbid return/break/continue breaking out of finally,
594,PEP 594 – Removing dead batteries from the standard library,
592,PEP 592 – Adding “Yank” Support to the Simple API,
591,PEP 591 – Adding a final qualifier to typing,
589,PEP 589 – TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys,
590,PEP 590 – Vectorcall: a fast calling protocol for CPython,
588,PEP 588 – GitHub Issues Migration Plan,
586,PEP 586 – Literal Types,
587,PEP 587 – Python Initialization Configuration,
582,PEP 582 – Python local packages directory,
585,PEP 585 – Type Hinting Generics In Standard Collections,
584,PEP 584 – Add Union Operators To dict,
579,PEP 579 – Refactoring C functions and methods,
580,PEP 580 – The C call protocol,
583,PEP 583 – A Concurrency Memory Model for Python,
574,PEP 574 – Pickle protocol 5 with out-of-band data,
578,PEP 578 – Python Runtime Audit Hooks,
577,PEP 577 – Augmented Assignment Expressions,
576,PEP 576 – Rationalize Built-in function classes,
575,PEP 575 – Unifying function/method classes,
573,PEP 573 – Module State Access from C Extension Methods,
581,PEP 581 – Using GitHub Issues for CPython,
571,PEP 571 – The manylinux2010 Platform Tag,
570,PEP 570 – Python Positional-Only Parameters,
569,PEP 569 – Python 3.8 Release Schedule,
568,PEP 568 – Generator-sensitivity for Context Variables,
567,PEP 567 – Context Variables,
572,PEP 572 – Assignment Expressions,
566,PEP 566 – Metadata for Python Software Packages 2.1,
564,PEP 564 – Add new time functions with nanosecond resolution,
563,PEP 563 – Postponed Evaluation of Annotations,
565,PEP 565 – Show DeprecationWarning in __main__,
560,PEP 560 – Core support for typing module and generic types,
562,PEP 562 – Module __getattr__ and __dir__,
561,PEP 561 – Distributing and Packaging Type Information,
559,PEP 559 – Built-in noop(),
558,PEP 558 – Defined semantics for locals(),
555,PEP 555 – Context-local variables (contextvars),
556,PEP 556 – Threaded garbage collection,
557,PEP 557 – Data Classes,
553,PEP 553 – Built-in breakpoint(),
552,PEP 552 – Deterministic pycs,
554,PEP 554 – Multiple Interpreters in the Stdlib,
551,PEP 551 – Security transparency in the Python runtime,
548,PEP 548 – More Flexible Loop Control,
549,PEP 549 – Instance Descriptors,
547,PEP 547 – Running extension modules using the -m option,
545,PEP 545 – Python Documentation Translations,
550,PEP 550 – Execution Context,
546,PEP 546 – Backport ssl.MemoryBIO and ssl.SSLObject to Python 2.7,
542,PEP 542 – Dot Notation Assignment In Function Header,
543,PEP 543 – A Unified TLS API for Python,
541,PEP 541 – Package Index Name Retention,
539,PEP 539 – A New C-API for Thread-Local Storage in CPython,
540,PEP 540 – Add a new UTF-8 Mode,
544,PEP 544 – Protocols: Structural subtyping (static duck typing),
537,PEP 537 – Python 3.7 Release Schedule,
534,PEP 534 – Improved Errors for Missing Standard Library Modules,
532,PEP 532 – A circuit breaking protocol and binary operators,
531,PEP 531 – Existence checking operators,
536,PEP 536 – Final Grammar for Literal String Interpolation,
538,PEP 538 – Coercing the legacy C locale to a UTF-8 based locale,
533,PEP 533 – Deterministic cleanup for iterators,
535,PEP 535 – Rich comparison chaining,
528,PEP 528 – Change Windows console encoding to UTF-8,
529,PEP 529 – Change Windows filesystem encoding to UTF-8,
530,PEP 530 – Asynchronous Comprehensions,
527,PEP 527 – Removing Un(der)used file types/extensions on PyPI,
526,PEP 526 – Syntax for Variable Annotations,
525,PEP 525 – Asynchronous Generators,
523,PEP 523 – Adding a frame evaluation API to CPython,
524,PEP 524 – Make os.urandom() blocking on Linux,
522,PEP 522 – Allow BlockingIOError in security sensitive APIs,
521,PEP 521 – Managing global context via ‘with’ blocks in generators and coroutines,
518,PEP 518 – Specifying Minimum Build System Requirements for Python Projects,
519,PEP 519 – Adding a file system path protocol,
520,PEP 520 – Preserving Class Attribute Definition Order,
516,PEP 516 – Build system abstraction for pip/conda etc,
515,PEP 515 – Underscores in Numeric Literals,
517,PEP 517 – A build-system independent format for source trees,
514,PEP 514 – Python registration in the Windows registry,
512,PEP 512 – Migrating from hg.python.org to GitHub,
513,PEP 513 – A Platform Tag for Portable Linux Built Distributions,
511,PEP 511 – API for code transformers,
509,PEP 509 – Add a private version to dict,
508,PEP 508 – Dependency specification for Python Software Packages,
510,PEP 510 – Specialize functions with guards,
503,PEP 503 – Simple Repository API,
500,PEP 500 – A protocol for delegating datetime methods to their tzinfo implementations,
505,PEP 505 – None-aware operators,
502,PEP 502 – String Interpolation - Extended Discussion,
499,PEP 499 – ,
496,PEP 496 – Environment Markers,
504,PEP 504 – Using the System RNG by default,
506,PEP 506 – Adding A Secrets Module To The Standard Library,
501,PEP 501 – General purpose string interpolation,
498,PEP 498 – Literal String Interpolation,
507,PEP 507 – Migrate CPython to Git and GitLab,
497,PEP 497 – A standard mechanism for backward compatibility,
495,PEP 495 – Local Time Disambiguation,
494,PEP 494 – Python 3.6 Release Schedule,
493,PEP 493 – HTTPS verification migration tools for Python 2.7,
490,PEP 490 – Chain exceptions at C level,
489,PEP 489 – Multi-phase extension module initialization,
492,PEP 492 – Coroutines with async and await syntax,
488,PEP 488 – Elimination of PYO files,
491,PEP 491 – The Wheel Binary Package Format 1.9,
485,PEP 485 – A Function for testing approximate equality,
486,PEP 486 – Make the Python Launcher aware of virtual environments,
487,PEP 487 – Simpler customisation of class creation,
482,PEP 482 – Literature Overview for Type Hints,
483,PEP 483 – The Theory of Type Hints,
479,PEP 479 – Change StopIteration handling inside generators,
484,PEP 484 – Type Hints,
481,"PEP 481 – Migrate CPython to Git, Github, and Phabricator",
480,PEP 480 – Surviving a Compromise of PyPI: End-to-end signing of packages,
478,PEP 478 – Python 3.5 Release Schedule,
477,PEP 477 – Backport ensurepip (PEP 453) to Python 2.7,
475,PEP 475 – Retry system calls failing with EINTR,
476,PEP 476 – Enabling certificate verification by default for stdlib http clients,
474,PEP 474 – Creating forge.python.org,
473,PEP 473 – Adding structured data to built-in exceptions,
472,PEP 472 – Support for indexing with keyword arguments,
467,PEP 467 – Minor API improvements for binary sequences,
469,PEP 469 – Migration of dict iteration code to Python 3,
471,PEP 471 – os.scandir() function – a better and faster directory iterator,
468,PEP 468 – Preserving the order of **kwargs in a function.,
470,PEP 470 – Removing External Hosting Support on PyPI,
464,PEP 464 – Removal of the PyPI Mirror Authenticity API,
466,PEP 466 – Network Security Enhancements for Python 2.7.x,
463,PEP 463 – Exception-catching expressions,
461,PEP 461 – Adding % formatting to bytes and bytearray,
462,PEP 462 – Core development workflow automation for CPython,
459,PEP 459 – Standard Metadata Extensions for Python Software Packages,
460,PEP 460 – Add binary interpolation and formatting,
465,PEP 465 – A dedicated infix operator for matrix multiplication,
457,PEP 457 – Notation For Positional-Only Parameters,
454,PEP 454 – Add a new tracemalloc module to trace Python memory allocations,
452,PEP 452 – API for Cryptographic Hash Functions v2.0,
450,PEP 450 – Adding A Statistics Module To The Standard Library,
449,PEP 449 – Removal of the PyPI Mirror Auto Discovery and Naming Scheme,
453,PEP 453 – Explicit bootstrapping of pip in Python installations,
458,PEP 458 – Secure PyPI downloads with signed repository metadata,
451,PEP 451 – A ModuleSpec Type for the Import System,
448,PEP 448 – Additional Unpacking Generalizations,
455,PEP 455 – Adding a key-transforming dictionary to collections,
447,PEP 447 – Add __getdescriptor__ method to metaclass,
456,PEP 456 – Secure and interchangeable hash algorithm,
443,PEP 443 – Single-dispatch generic functions,
446,PEP 446 – Make newly created file descriptors non-inheritable,
445,PEP 445 – Add new APIs to customize Python memory allocators,
444,PEP 444 – Python Web3 Interface,
438,PEP 438 – Transitioning to release-file hosting on PyPI,
441,PEP 441 – Improving Python ZIP Application Support,
439,PEP 439 – Inclusion of implicit pip bootstrap in Python installation,
437,"PEP 437 – A DSL for specifying signatures, annotations and argument converters",
440,PEP 440 – Version Identification and Dependency Specification,
435,PEP 435 – Adding an Enum type to the Python standard library,
434,PEP 434 – IDLE Enhancement Exception for All Branches,
436,PEP 436 – The Argument Clinic DSL,
433,PEP 433 – Easier suppression of file descriptor inheritance,
432,PEP 432 – Restructuring the CPython startup sequence,
431,PEP 431 – Time zone support improvements,
442,PEP 442 – Safe object finalization,
430,PEP 430 – Migrating to Python 3 as the default online documentation,
429,PEP 429 – Python 3.4 Release Schedule,
428,PEP 428 – The pathlib module – object-oriented filesystem paths,
425,PEP 425 – Compatibility Tags for Built Distributions,
427,PEP 427 – The Wheel Binary Package Format 1.0,
424,PEP 424 – A method for exposing a length hint,
426,PEP 426 – Metadata for Python Software Packages 2.0,
423,PEP 423 – Naming conventions and recipes related to packaging,
422,PEP 422 – Simpler customisation of class creation,
420,PEP 420 – Implicit Namespace Packages,
421,PEP 421 – Adding sys.implementation,
417,PEP 417 – Including mock in the Standard Library,
418,"PEP 418 – Add monotonic time, performance counter, and process time functions",
416,PEP 416 – Add a frozendict builtin type,
415,PEP 415 – Implement context suppression with exception attributes,
419,PEP 419 – Protecting cleanup statements from interruptions,
414,PEP 414 – Explicit Unicode Literal for Python 3.3,
412,PEP 412 – Key-Sharing Dictionary,
410,PEP 410 – Use decimal.Decimal type for timestamps,
411,PEP 411 – Provisional packages in the Python standard library,
409,PEP 409 – Suppressing exception context,
413,PEP 413 – Faster evolution of the Python Standard Library,
405,PEP 405 – Python Virtual Environments,
406,PEP 406 – Improved Encapsulation of Import State,
407,PEP 407 – New release cycle and introducing long-term support versions,
408,PEP 408 – Standard library __preview__ package,
401,PEP 401 – BDFL Retirement,
404,PEP 404 – Python 2.8 Un-release Schedule,
403,PEP 403 – General purpose decorator clause (aka “@in” clause),
400,PEP 400 – Deprecate codecs.StreamReader and codecs.StreamWriter,
399,PEP 399 – Pure Python/C Accelerator Module Compatibility Requirements,
402,PEP 402 – Simplified Package Layout and Partitioning,
398,PEP 398 – Python 3.3 Release Schedule,
394,PEP 394 – The “python” Command on Unix-Like Systems,
396,PEP 396 – Module Version Numbers,
397,PEP 397 – Python launcher for Windows,
393,PEP 393 – Flexible String Representation,
395,PEP 395 – Qualified Names for Modules,
390,PEP 390 – Static metadata for Distutils,
391,PEP 391 – Dictionary-Based Configuration For Logging,
387,PEP 387 – Backwards Compatibility Policy,
389,PEP 389 – argparse - New Command Line Parsing Module,
386,PEP 386 – Changing the version comparison module in Distutils,
385,PEP 385 – Migrating from Subversion to Mercurial,
392,PEP 392 – Python 3.2 Release Schedule,
384,PEP 384 – Defining a Stable ABI,
383,PEP 383 – Non-decodable Bytes in System Character Interfaces,
379,PEP 379 – Adding an Assignment Expression,
380,PEP 380 – Syntax for Delegating to a Subgenerator,
382,PEP 382 – Namespace Packages,
378,PEP 378 – Format Specifier for Thousands Separator,
377,PEP 377 – Allow __enter__() methods to skip the statement body,
381,PEP 381 – Mirroring infrastructure for PyPI,
376,PEP 376 – Database of Installed Python Distributions,
375,PEP 375 – Python 3.1 Release Schedule,
372,PEP 372 – Adding an ordered dictionary to collections,
373,PEP 373 – Python 2.7 Release Schedule,
371,PEP 371 – Addition of the multiprocessing package to the standard library,
369,PEP 369 – Post import hooks,
367,PEP 367 – New Super,
368,PEP 368 – Standard image protocol and class,
364,PEP 364 – Transitioning to the Py3K Standard Library,
363,PEP 363 – Syntax For Dynamic Attribute Access,
366,PEP 366 – Main module explicit relative imports,
365,PEP 365 – Adding the pkg_resources module,
374,PEP 374 – Choosing a distributed VCS for the Python project,
362,PEP 362 – Function Signature Object,
361,PEP 361 – Python 2.6 and 3.0 Release Schedule,
370,PEP 370 – Per user site-packages directory,
360,PEP 360 – Externally Maintained Packages,
359,PEP 359 – The “make” Statement,
356,PEP 356 – Python 2.5 Release Schedule,
357,PEP 357 – Allowing Any Object to be Used for Slicing,
358,PEP 358 – The “bytes” Object,
353,PEP 353 – Using ssize_t as the index type,
352,PEP 352 – Required Superclass for Exceptions,
354,PEP 354 – Enumerations in Python,
350,PEP 350 – Codetags,
355,PEP 355 – Path - Object oriented filesystem paths,
349,PEP 349 – Allow str() to return unicode strings,
351,PEP 351 – The freeze protocol,
348,PEP 348 – Exception Reorganization for Python 3.0,
345,PEP 345 – Metadata for Python Software Packages 1.2,
347,PEP 347 – Migrating the Python CVS to Subversion,
341,PEP 341 – Unifying try-except and try-finally,
344,PEP 344 – Exception Chaining and Embedded Tracebacks,
346,PEP 346 – User Defined (”,
342,PEP 342 – Coroutines via Enhanced Generators,
340,PEP 340 – Anonymous Block Statements,
337,PEP 337 – Logging Usage in the Standard Library,
343,PEP 343 – The “with” Statement,
339,PEP 339 – Design of the CPython Compiler,
336,PEP 336 – Make None Callable,
338,PEP 338 – Executing modules as scripts,
330,PEP 330 – Python Bytecode Verification,
332,PEP 332 – Byte vectors and String/Unicode Unification,
335,PEP 335 – Overloadable Boolean Operators,
334,PEP 334 – Simple Coroutines via SuspendIteration,
331,PEP 331 – Locale-Independent Float/String Conversions,
328,PEP 328 – Imports: Multi-Line and Absolute/Relative,
329,PEP 329 – Treating Builtins as Constants in the Standard Library,
325,PEP 325 – Resource-Release Support for Generators,
326,PEP 326 – A Case for Top and Bottom Values,
322,PEP 322 – Reverse Iteration,
323,PEP 323 – Copyable Iterators,
327,PEP 327 – Decimal Data Type,
320,PEP 320 – Python 2.4 Release Schedule,
317,PEP 317 – Eliminate Implicit Exception Instantiation,
319,PEP 319 – Python Synchronize/Asynchronize Block,
333,PEP 333 – Python Web Server Gateway Interface v1.0,
315,PEP 315 – Enhanced While Loop,
316,PEP 316 – Programming by Contract for Python,
321,PEP 321 – Date/Time Parsing and Formatting,
318,PEP 318 – Decorators for Functions and Methods,
314,PEP 314 – Metadata for Python Software Packages 1.1,
313,PEP 313 – Adding Roman Numeral Literals to Python,
312,PEP 312 – Simple Implicit Lambda,
311,PEP 311 – Simplified Global Interpreter Lock Acquisition for Extensions,
306,PEP 306 – How to Change Python’s Grammar,
309,PEP 309 – Partial Function Application,
310,PEP 310 – Reliable Acquisition/Release Pairs,
324,PEP 324 – subprocess - New process module,
307,PEP 307 – Extensions to the pickle protocol,
304,PEP 304 – Controlling Generation of Bytecode Files,
303,PEP 303 – Extend divmod() for Multiple Divisors,
299,PEP 299 – Special __main__() function in modules,
305,PEP 305 – CSV File API,
298,PEP 298 – The Locked Buffer Interface,
302,PEP 302 – New Import Hooks,
308,PEP 308 – Conditional Expressions,
301,PEP 301 – Package Index and Metadata for Distutils,Either “success” or “fail”.
295,PEP 295 – Interpretation of multiline string constants,
297,PEP 297 – Support for System Upgrades,
294,PEP 294 – Type Names in the types Module,
296,PEP 296 – Adding a bytes Object Type,
291,PEP 291 – Backward Compatibility for the Python 2 Standard Library,
293,PEP 293 – Codec Error Handling Callbacks,
288,PEP 288 – Generators Attributes and Exceptions,
292,PEP 292 – Simpler String Substitutions,
286,PEP 286 – Enhanced Argument Tuples,
290,PEP 290 – Code Migration and Modernization,
289,PEP 289 – Generator Expressions,
283,PEP 283 – Python 2.3 Release Schedule,
284,PEP 284 – Integer for-loops,
287,PEP 287 – reStructuredText Docstring Format,
281,PEP 281 – Loop Counter Iteration with range and xrange,
280,PEP 280 – Optimizing access to globals,
285,PEP 285 – Adding a bool type,
282,PEP 282 – A Logging System,
279,PEP 279 – The enumerate() built-in function,
278,PEP 278 – Universal Newline Support,
277,PEP 277 – Unicode file name support for Windows NT,
274,PEP 274 – Dict Comprehensions,
275,PEP 275 – Switching on Multiple Values,
276,PEP 276 – Simple Iterator for ints,
273,PEP 273 – Import Modules from Zip Archives,
272,PEP 272 – API for Block Encryption Algorithms v1.0,
271,PEP 271 – Prefixing sys.path by command line option,
270,PEP 270 – uniq method for list objects,
269,PEP 269 – Pgen Module for Python,
268,PEP 268 – Extended HTTP functionality and WebDAV,
267,PEP 267 – Optimized Access to Module Namespaces,
266,PEP 266 – Optimizing Global Variable/Attribute Access,
265,PEP 265 – Sorting Dictionaries by Value,
263,PEP 263 – Defining Python Source Code Encodings,
264,PEP 264 – Future statements in simulated shells,
261,PEP 261 – Support for “wide” Unicode characters,
262,PEP 262 – A Database of Installed Python Packages,
259,PEP 259 – Omit printing newline after newline,
260,PEP 260 – Simplify xrange(),
257,PEP 257 – Docstring Conventions,
258,PEP 258 – Docutils Design Specification,
256,PEP 256 – Docstring Processing System Framework,
254,PEP 254 – Making Classes Look More Like Types,
251,PEP 251 – Python 2.2 Release Schedule,
255,PEP 255 – Simple Generators,
250,PEP 250 – Using site-packages on Windows,
247,PEP 247 – API for Cryptographic Hash Functions,
253,PEP 253 – Subtyping Built-in Types,
248,PEP 248 – Python Database API Specification v1.0,
249,PEP 249 – Python Database API Specification v2.0,
244,PEP 244 – The ,
243,PEP 243 – Module Repository Upload Mechanism,
252,PEP 252 – Making Types Look More Like Classes,
246,PEP 246 – Object Adaptation,
241,PEP 241 – Metadata for Python Software Packages,
240,PEP 240 – Adding a Rational Literal to Python,
239,PEP 239 – Adding a Rational Type to Python,
238,PEP 238 – Changing the Division Operator,
245,PEP 245 – Python Interface Syntax,
237,PEP 237 – Unifying Long Integers and Integers,
234,PEP 234 – Iterators,
242,PEP 242 – Numeric Kinds,
235,PEP 235 – Import on Case-Insensitive Platforms,
236,PEP 236 – Back to the __future__,
233,PEP 233 – Python Online Help,
232,PEP 232 – Function Attributes,
229,PEP 229 – Using Distutils to Build Python,
228,PEP 228 – Reworking Python’s Numeric Model,
231,PEP 231 – __findattr__(),
227,PEP 227 – Statically Nested Scopes,
226,PEP 226 – Python 2.1 Release Schedule,
230,PEP 230 – Warning Framework,
224,PEP 224 – Attribute Docstrings,
222,PEP 222 – Web Library Enhancements,
223,PEP 223 – Change the Meaning of ,
221,PEP 221 – Import As,
220,"PEP 220 – Coroutines, Generators, Continuations",
215,PEP 215 – String Interpolation,
217,PEP 217 – Display Hook for Interactive Use,
225,PEP 225 – Elementwise/Objectwise Operators,
216,PEP 216 – Docstring Format,
218,PEP 218 – Adding a Built-In Set Object Type,
219,PEP 219 – Stackless Python,
210,PEP 210 – Decoupling the Interpreter Loop,
212,PEP 212 – Loop Counter Iteration,
213,PEP 213 – Attribute Access Handlers,
211,PEP 211 – Adding A New Outer Product Operator,
20,PEP 20 – The Zen of Python,
11,PEP 11 – CPython platform support,
13,PEP 13 – Python Language Governance,
214,PEP 214 – Extended Print Statement,
12,PEP 12 – Sample reStructuredText PEP Template,
209,PEP 209 – Multi-dimensional Arrays,
10,PEP 10 – Voting Guidelines,
9,PEP 9 – Sample Plaintext PEP Template,
5,PEP 5 – Guidelines for Language Evolution,
2,PEP 2 – Procedure for Adding New Modules,
3,PEP 3 – Guidelines for Handling Bug Reports,
6,PEP 6 – Bug Fix Releases,
8,PEP 8 – Style Guide for Python Code,
4,PEP 4 – Deprecation of Standard Modules,
7,PEP 7 – Style Guide for C Code,
